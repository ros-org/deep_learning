<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.2.0">
<procedure name="main">
<interface/>
<body>
<c>* ==========================================================</c>
<c>* 功能  ：对原图像及其索引图同时做多种变换，用于数据增强</c>
<c>* 注意：None</c>
<c>* 文件名  ：图像增强-对图像做多种变换.hdev</c>
<c>* 相关文件：无</c>
<c>* 作者    ：Liangliang Bai (liangliang.bai@leapting.com)</c>
<c>* 版权    ：&lt;Copyright(C) 2022- Hu Zhou leapting Technology Co., Ltd. All rights reserved.&gt;</c>
<c>* 修改记录：</c>
<c>* 日  期        版本     修改人   走读人  修改记录</c>
<c>* 2023.08.02    1.0.0.1  白亮亮</c>
<c>* ==========================================================</c>
<c></c>
<l>org_index_image_dir:='D:/LT_DATASETS_PATROL_ROBOT/segmentation/train/labels/index_label'</l>
<l>original_images_dir:='D:/LT_DATASETS_PATROL_ROBOT/segmentation/train/labels/source_image/'  //待裁剪图片所在文件夹</l>
<l>index_image_aug_dir:='D:/LT_DATASETS_PATROL_ROBOT/segmentation/train/index_image_aug/'</l>
<l>file_exists (index_image_aug_dir, FileExists)</l>
<l>if (not(FileExists))</l>
<l>    make_dir(index_image_aug_dir)                                                                </l>
<l>endif</l>
<l>images_aug_dir:='D:/LT_DATASETS_PATROL_ROBOT/segmentation/train/image_aug/'                 //裁剪好的图片保存路径</l>
<l>file_exists (images_aug_dir, FileExists)</l>
<l>if (not(FileExists))</l>
<l>    make_dir(images_aug_dir)                                                               </l>
<l>endif</l>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files (original_images_dir, ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    parse_filename (ImageFiles[Index], BaseName, Extension, Directory)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    h_center:=Height/2</l>
<l>    w_center:=Width/2 </l>
<l>    gen_cross_contour_xld (Cross, h_center, w_center, 16, 0.785398)</l>
<c>    </c>
<l>    LT_img_augumentation (Image, images_aug_dir, BaseName, Extension, w_center, h_center)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="LT_img_augumentation">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="images_cropped_dir" base_type="ctrl" dimension="0"/>
<par name="BaseName" base_type="ctrl" dimension="0"/>
<par name="Extension" base_type="ctrl" dimension="0"/>
<par name="w_center" base_type="ctrl" dimension="0"/>
<par name="h_center" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>    *针对单张图，实现原图&amp;&amp;原图映射</c>
<l>    for img_map:=0 to 1 by 1</l>
<l>        new_img_name:=images_cropped_dir+BaseName+'_'+img_map    // +'.'+Extension</l>
<c>        *原图</c>
<l>        if(img_map==0)</l>
<l>            image:=Image</l>
<l>        endif</l>
<c>        * 原图左右映射</c>
<l>        if(img_map==1)</l>
<l>            mirror_image (Image, ImageMirror, 'column')</l>
<l>            image:=ImageMirror</l>
<l>        endif</l>
<c>        </c>
<c>        *实现光线变亮、变暗、旋转、等其他增强</c>
<l>        for augumentIdx:=0 to 14 by 1</l>
<l>            new_img_name:=images_cropped_dir+BaseName+'_'+img_map+'_'+augumentIdx   // +'.'+Extension</l>
<c>            *图像不变换（原图或者原图仅经过左右映射）</c>
<l>            if(augumentIdx==0)</l>
<l>                image2:=image</l>
<l>            endif</l>
<c>            * 原图线性变亮*1.1</c>
<l>            if(augumentIdx==1)</l>
<l>                scale_image (image, ImageScaled, 1.05, 0)</l>
<l>                image2:=ImageScaled</l>
<l>            endif</l>
<c>            </c>
<c>            *原图线性变亮*1.2</c>
<l>            if(augumentIdx==2)</l>
<l>                scale_image (image, ImageScaled2, 1.1, 0)</l>
<l>                image2:=ImageScaled2</l>
<l>            endif</l>
<c>            </c>
<c>            *原图线性变亮*1.3</c>
<l>            if(augumentIdx==3)</l>
<l>                scale_image (image, ImageScaled3, 1.15, 0)</l>
<l>                image2:=ImageScaled3</l>
<l>            endif</l>
<c>            </c>
<c>            *原图线性变暗*0.8</c>
<l>            if(augumentIdx==4)</l>
<l>                scale_image (image, ImageScaled4, 0.95, 0)</l>
<l>                image2:=ImageScaled4</l>
<l>            endif</l>
<c>            </c>
<c>            *原图线性变暗*0.9</c>
<l>            if(augumentIdx==5)</l>
<l>                scale_image (image, ImageScaled5, 0.90, 0)</l>
<l>                image2:=ImageScaled5</l>
<l>            endif</l>
<c>            </c>
<c>            *原图线性变暗*0.95</c>
<l>            if(augumentIdx==6)</l>
<l>                scale_image (image, ImageScaled6, 0.85, 0)</l>
<l>                image2:=ImageScaled6</l>
<l>            endif</l>
<c>            </c>
<c>            * 旋转10度（最近邻）</c>
<l>            if(augumentIdx==7)</l>
<l>                rotate_image (image, ImageRotate, 7, 'nearest_neighbor')</l>
<l>                image2:=ImageRotate</l>
<l>            endif</l>
<c>            </c>
<c>            *旋转20度</c>
<l>            if(augumentIdx==8)</l>
<l>                rotate_image (image, ImageRotate1, 13, 'constant')</l>
<l>                image2:=ImageRotate1</l>
<l>            endif</l>
<c>            </c>
<c>            *旋转30度（最近邻）</c>
<l>            if(augumentIdx==9)</l>
<l>                rotate_image (image, ImageRotate2, 20, 'nearest_neighbor')</l>
<l>                image2:=ImageRotate2</l>
<l>            endif</l>
<c>            </c>
<c>            *旋转-30度</c>
<l>            if(augumentIdx==10)</l>
<l>                rotate_image (image, ImageRotate3, -20, 'constant')</l>
<l>                image2:=ImageRotate3</l>
<l>            endif</l>
<c>            </c>
<c>            *旋转-20度（最近邻）</c>
<l>            if(augumentIdx==11)</l>
<l>                rotate_image (image,ImageRotate4, -13, 'nearest_neighbor')</l>
<l>                image2:=ImageRotate4</l>
<l>            endif</l>
<c>            </c>
<c>            *旋转-10度</c>
<l>            if(augumentIdx==12)</l>
<l>                rotate_image (image, ImageRotate5, -7, 'constant')</l>
<l>               image2:=ImageRotate5</l>
<l>            endif</l>
<c>            </c>
<c>            *H方向拉伸</c>
<l>            if(augumentIdx==13)</l>
<l>                zoom_image_factor (image, ImageZoomed, 1, 1.1, 'nearest_neighbor')</l>
<l>                image2:=ImageZoomed</l>
<l>            endif</l>
<c>            </c>
<c>            *H方向拉伸</c>
<l>            if(augumentIdx==14)</l>
<l>                zoom_image_factor (image, ImageZoomed1, 1, 1.2, 'nearest_neighbor')</l>
<l>                image2:=ImageZoomed1</l>
<l>            endif</l>
<c>                 </c>
<c>            *针对原图变换后的效果，实现多角度切图</c>
<c>            *col_offsets和row_offsets是遍历组合</c>
<l>            col_offsets:=[-200, -100, 0, 100, 200]</l>
<l>            row_offsets:=[0]</l>
<l>            for col_idx:=0 to |col_offsets|-1 by 1</l>
<l>                for row_idx:=0 to |row_offsets|-1 by 1</l>
<l>                    col_offset:=col_offsets[col_idx]</l>
<l>                    row_offset:=row_offsets[row_idx]</l>
<l>                    img_heights:=[960,1080]</l>
<l>                    img_widths:=[960,1080]</l>
<c>                    *img_heights和img_widths是</c>
<l>                    for img_hgt_idx:=0 to |img_heights|-1 by 1</l>
<l>                        img_height:=img_heights[img_hgt_idx]</l>
<l>                        img_width:=img_widths[img_hgt_idx]</l>
<l>                        dev_set_draw ('margin')</l>
<l>                        new_img_name:=images_cropped_dir+BaseName+'_'+img_map+'_'+augumentIdx+'_'+col_idx+'_'+row_idx+'_'+img_hgt_idx+'.'+Extension</l>
<l>                        col_start:=w_center-img_width/2+col_offset    //修改起点列坐标</l>
<l>                        if(col_start&lt;0)</l>
<l>                            col_start:=0</l>
<l>                        endif</l>
<l>                        row_start:=h_center-img_height/2+row_offset   //修改起点行坐标</l>
<l>                        if (row_start&lt;0)</l>
<l>                            row_start:=0</l>
<l>                        endif</l>
<l>                        col_end:=col_start+img_width-1</l>
<l>                        row_end:=row_start+img_height-1</l>
<l>                        gen_rectangle1 (Rectangle, row_start, col_start, row_end, col_end)</l>
<l>                        reduce_domain (image2, Rectangle, ImageReduced)</l>
<l>                        crop_domain (ImageReduced, ImagePart)</l>
<l>                        write_image (ImagePart, 'png', 0, new_img_name)</l>
<l>                    endfor</l>
<l>                endfor</l>
<l>            endfor</l>
<l>        endfor</l>
<l>    endfor</l>
<l>return ()</l>
</body>
<docu id="LT_img_augumentation">
<parameters>
<parameter id="BaseName"/>
<parameter id="Extension"/>
<parameter id="Image"/>
<parameter id="h_center"/>
<parameter id="images_cropped_dir"/>
<parameter id="w_center"/>
</parameters>
</docu>
</procedure>
</hdevelop>
